{"version":3,"sources":["Dashboard/TSne.js"],"names":["TSne","this","scatterPlot","margin","width","height","svg","d3","append","attr","concat","window","appURL","then","data","console","log","x","domain","range","call","y","color","Object","_home_shivam_code_covid_visualization_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","Array","keys","selectAll","enter","d","style","parseInt","legend","i","text","select","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_hoc_Aux__WEBPACK_IMPORTED_MODULE_11__","react_bootstrap__WEBPACK_IMPORTED_MODULE_7__","className","react_bootstrap__WEBPACK_IMPORTED_MODULE_8__","md","xl","react_bootstrap__WEBPACK_IMPORTED_MODULE_9__","Body","React","Component"],"mappings":"8MAOMA,8LAGEC,KAAKC,oDAKL,IAAIC,EAAgB,GAAhBA,EAA2B,GAA3BA,EAAuC,GAAvCA,EAAiD,GACjDC,EAAQ,IAAMD,EAAcA,EAC5BE,EAAS,IAAMF,EAAaA,EAG5BG,EAAMC,IAAU,eACfC,OAAO,OACPC,KAAK,QAASL,EAAQD,EAAcA,GACpCM,KAAK,SAAUJ,EAASF,EAAaA,GACrCK,OAAO,KACPC,KAAK,YACF,aAAeN,EAAc,IAAMA,EAAa,KAGxDI,IAAA,GAAAG,OAAUC,OAAOC,OAAjB,0BACKC,KAAK,SAACC,GACHC,QAAQC,IAAIF,GAEZ,IAAIG,EAAIV,MACHW,OAAO,EAAE,GAAI,KACbC,MAAM,CAAC,EAAGf,IACfE,EAAIE,OAAO,KACNC,KAAK,YAAa,eAAiBJ,EAAS,KAC5Ce,KAAKb,IAAcU,IAGxB,IAAII,EAAId,MACHW,OAAO,EAAE,GAAI,KACbC,MAAM,CAACd,EAAQ,IACpBC,EAAIE,OAAO,KACNY,KAAKb,IAAYc,IAGtB,IAAIC,EAAQf,MACPW,OADOK,OAAAC,EAAA,EAAAD,CACIE,MAAM,IAAIC,SACrBP,MAAM,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UACtE,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAClE,YAGRb,EAAIE,OAAO,KACNmB,UAAU,OACVb,KAAKA,GACLc,QACApB,OAAO,UACPC,KAAK,KAAM,SAAUoB,GAAK,OAAOZ,EAAEY,EAAC,SACpCpB,KAAK,KAAM,SAAUoB,GAAK,OAAOR,EAAEQ,EAAC,SACpCpB,KAAK,IAAK,GACVqB,MAAM,OAAQ,SAAUD,GAAK,OAAOP,EAAMS,SAASF,EAAC,WAEzD,IAAIG,EAAS1B,EAAIqB,UAAU,WACtBb,KAAKQ,EAAMJ,UACXU,QAAQpB,OAAO,KACfC,KAAK,QAAS,UACdA,KAAK,YAAa,SAAUoB,EAAGI,GAAK,MAAO,eAAqB,GAAJA,EAAS,MAE1ED,EAAOxB,OAAO,QACTC,KAAK,QAAS,IACdA,KAAK,SAAU,IACfqB,MAAM,OAAQ,SAAUD,GAAK,OAAOP,EAAMO,KAC1CpB,KAAK,YAAa,SAAUoB,EAAGI,GAC5B,MAAO,cAAgB7B,EAAQ,IAAM,QAG7C4B,EAAOxB,OAAO,QACTC,KAAK,IAAKL,EAAQ,IAClBK,KAAK,IAAK,GACVA,KAAK,KAAM,SACXqB,MAAM,cAAe,OACrBI,KAAK,SAAUL,GAAK,OAAOA,IAEhCvB,EAAI6B,OAAO,WACN3B,OAAO,QACP0B,KAAK,cACLJ,MAAM,cAAe,OACrBrB,KAAK,YAAa,uDAK/B,OACI2B,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACIJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,eAEfL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,IACbR,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACIT,EAAAC,EAAAC,cAACO,EAAA,EAAKC,KAAN,KACIV,EAAAC,EAAAC,cAAA,MAAIG,UAAU,QAAd,wBACAL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,2BAjG5BM,IAAMC,WA4GVhD","file":"static/js/15.17e1bca6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Row, Col, Card } from 'react-bootstrap';\r\n\r\nimport * as d3 from 'd3'\r\n\r\nimport Aux from \"../hoc/_Aux\";\r\n\r\nclass TSne extends React.Component {\r\n\r\n    componentDidMount() {\r\n        this.scatterPlot()\r\n    }\r\n\r\n    scatterPlot() {\r\n        // set the dimensions and margins of the graph\r\n        let margin = { top: 10, right: 30, bottom: 30, left: 60 },\r\n            width = 800 - margin.left - margin.right,\r\n            height = 800 - margin.top - margin.bottom;\r\n\r\n        // append the svg object to the body of the page\r\n        let svg = d3.select(\".my_dataviz\")\r\n            .append(\"svg\")\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n            .attr(\"transform\",\r\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n        //Read the data\r\n        d3.csv(`${window.appURL}/scatterplot-tnse.csv`)\r\n            .then((data) => {\r\n                console.log(data)\r\n                // Add X axis\r\n                let x = d3.scaleLinear()\r\n                    .domain([-70, 70])\r\n                    .range([0, width]);\r\n                svg.append(\"g\")\r\n                    .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n                    .call(d3.axisBottom(x));\r\n\r\n                // Add Y axis\r\n                let y = d3.scaleLinear()\r\n                    .domain([-70, 70])\r\n                    .range([height, 0]);\r\n                svg.append(\"g\")\r\n                    .call(d3.axisLeft(y));\r\n\r\n                // Color scale: give me a specie name, I return a color\r\n                let color = d3.scaleOrdinal()\r\n                    .domain([...Array(15).keys()])\r\n                    .range([\"#E63946\", \"#F1FAEE\", \"#A8DADC\", \"#457B9D\", \"#1D3557\", \"#d95af2\", \"#FCB0B3\",\r\n                        \"#7EB2DD\", \"#445E93\", \"#5B2333\", \"#EF8E29\", \"#C9DB4B\", \"#8EC56C\", \"#000000\",\r\n                        \"#433E3E\"])\r\n\r\n                // Add dots\r\n                svg.append('g')\r\n                    .selectAll(\"dot\")\r\n                    .data(data)\r\n                    .enter()\r\n                    .append(\"circle\")\r\n                    .attr(\"cx\", function (d) { return x(d['Axis1']); })\r\n                    .attr(\"cy\", function (d) { return y(d['Axis2']); })\r\n                    .attr(\"r\", 2)\r\n                    .style(\"fill\", function (d) { return color(parseInt(d['Kernel'])) })\r\n\r\n                let legend = svg.selectAll(\".legend\")\r\n                    .data(color.domain())\r\n                    .enter().append(\"g\")\r\n                    .attr(\"class\", \"legend\")\r\n                    .attr(\"transform\", function (d, i) { return \"translate(0,\" + i * 20 + \")\"; });\r\n\r\n                legend.append(\"rect\")\r\n                    .attr(\"width\", 10)\r\n                    .attr(\"height\", 10)\r\n                    .style(\"fill\", function (d) { return color(d); })\r\n                    .attr(\"transform\", function (d, i) {\r\n                        return \"translate(\" + (width - 10) + \",\" + 4 + \")\";\r\n                    })\r\n\r\n                legend.append(\"text\")\r\n                    .attr(\"x\", width - 24)\r\n                    .attr(\"y\", 9)\r\n                    .attr(\"dy\", \".35em\")\r\n                    .style(\"text-anchor\", \"end\")\r\n                    .text(function (d) { return d; });\r\n                \r\n                svg.select(\".legend\")\r\n                    .append(\"text\")\r\n                    .text(\"K-clusters\") \r\n                    .style(\"text-anchor\", \"end\")\r\n                    .attr(\"transform\", \"translate(710,0)\");\r\n            })\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <Aux>\r\n                <Row>\r\n                    <div className=\"graph-body\">\r\n                    </div>\r\n                    <Col md={12} xl={12}>\r\n                        <Card>\r\n                            <Card.Body>\r\n                                <h6 className='mb-4'>Litrature Clustering</h6>\r\n                                <div className=\"my_dataviz\">\r\n                                </div>\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TSne;"],"sourceRoot":""}