{"version":3,"sources":["Dashboard/Maps.js"],"names":["Maps","getSlider","data","datewiseHash","svg","sliderName","identifier","Date","prototype","addDays","days","date","this","valueOf","setDate","getDate","dateArr","startDate","stopDate","dateArray","Array","currentDate","push","getDates","dateStr","d","d3","currDate","sliderFill","sliderBottom","min","max","width","tickFormat","ticks","default","fill","on","val","concat","text","plotConfirmedCases","append","attr","call","value","format","casesTip","d3Tip","offset","html","cases","properties","name","deathsTip","height","color","domain","range","casesSvg","deathsSvg","projection","scale","translate","path","getDatewiseHash","dhash","forEach","el","promises","Promise","all","then","values","_values","Object","_home_shivam_code_covid_visualization_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","deaths","casesDatewise","deathsDatewise","casesByID","Code","tip","includes","features","id","selectAll","enter","style","show","hide","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","_hoc_Aux__WEBPACK_IMPORTED_MODULE_13__","react_bootstrap__WEBPACK_IMPORTED_MODULE_7__","react_bootstrap__WEBPACK_IMPORTED_MODULE_8__","md","xl","react_bootstrap__WEBPACK_IMPORTED_MODULE_9__","Body","className","React","Component"],"mappings":"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","file":"static/js/8.e33c94e5.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\n\nimport * as d3 from 'd3'\nimport d3Tip from \"d3-tip\"\nimport { sliderBottom } from 'd3-simple-slider'\n//import topojson from 'topojson'\n\nimport Aux from \"../hoc/_Aux\";\n\nclass Maps extends React.Component {\n    componentDidMount() {\n        let getSlider = (data, datewiseHash, svg, sliderName, identifier) => {\n            // Dates between two dates\n            Date.prototype.addDays = function (days) {\n                let date = new Date(this.valueOf())\n                date.setDate(date.getDate() + days)\n                return date\n            }\n\n            let getDates = (startDate, stopDate) => {\n                let dateArray = new Array()\n                let currentDate = startDate\n                while (currentDate <= stopDate) {\n                    dateArray.push(new Date(currentDate))\n                    currentDate = currentDate.addDays(1)\n                }\n                return dateArray\n            }\n\n            let startDate = new Date(2019, 11, 31)\n            let endDate = new Date(2020, 3, 22)\n            let dateArr = getDates(startDate, endDate)\n\n            let dateStr = (d) => {\n                return d3.timeFormat('%b %-d, %Y')(d)\n            }\n\n            // Initialize CurrDate\n            let currDate = d3.max(dateArr)\n\n            // Fill\n            let sliderFill = sliderBottom()\n                .min(d3.min(dateArr))\n                .max(d3.max(dateArr))\n                .width(300)\n                .tickFormat(d3.timeFormat('%b %-d, %Y'))\n                .ticks(5)\n                .default(d3.max(dateArr))\n                .fill('#2196f3')\n                .on('onchange', val => {\n                    currDate = val\n                    d3.select(`p#${sliderName}-value-fill`).text(dateStr(currDate))\n                    plotConfirmedCases(data, datewiseHash, dateStr(currDate), svg, identifier)\n                })\n            let gFill = d3\n                .select(`div#${sliderName}-slider-fill`)\n                .append('svg')\n                .attr('width', 500)\n                .attr('height', 100)\n                .append('g')\n                .attr('transform', 'translate(30,30)')\n\n            gFill.call(sliderFill)\n\n            d3.select(`p#${sliderName}-value-fill`).text(d3.timeFormat('%b %-d, %Y')(sliderFill.value()))\n\n            // initial call\n            plotConfirmedCases(data, datewiseHash, dateStr(currDate), svg, identifier)\n\n        }\n\n        let format = d3.format(\",\")\n\n        // Set SVGs and tooltips\n        let casesTip = d3Tip()\n            .attr('class', 'd3-tip')\n            .offset([-10, 0])\n            .html(function (d) {\n                let cases = (d.cases == 0 || d.cases) ? format(d.cases) : \"Data unavailable\"\n                return \"<strong>Country: </strong><span className='details'>\"\n                    + d.properties.name\n                    + \"<br></span>\"\n                    + \"<strong>Cases: </strong><span className='details'>\"\n                    + cases\n                    + \"</span>\"\n            })\n\n        let deathsTip = d3Tip()\n            .attr('class', 'd3-tip')\n            .offset([-10, 0])\n            .html(function (d) {\n                let cases = d.cases ? format(d.cases) : \"Data unavailable\"\n                return \"<strong>Country: </strong><span className='details'>\"\n                    + d.properties.name\n                    + \"<br></span>\"\n                    + \"<strong>Cases: </strong><span className='details'>\"\n                    + cases\n                    + \"</span>\"\n            })\n\n        let margin = { top: 0, right: 0, bottom: 0, left: 0 },\n            width = 960 - margin.left - margin.right,\n            height = 500 - margin.top - margin.bottom\n\n        let color = d3.scaleThreshold()\n            .domain([5, 10, 50, 100, 500, 1000, 2000, 5000])\n            .range([\"#FF9B54\", \"#E6854A\", \"#CD6F3F\", \"#B45935\", \"#9A422A\", \"#812C20\", \"#681615\", \"#4F000B\"])\n\n        let casesSvg = d3.select(\".cases-map\")\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .append('g')\n            .attr('class', 'map')\n\n        let deathsSvg = d3.select(\".deaths-map\")\n            .append(\"svg\")\n            .attr(\"width\", width)\n            .attr(\"height\", height)\n            .append('g')\n            .attr('class', 'map')\n\n        let projection = d3.geoMercator()\n            .scale(130)\n            .translate([width / 2, height / 1.5])\n\n        let path = d3.geoPath().projection(projection)\n\n        casesSvg.call(casesTip)\n        deathsSvg.call(deathsTip)\n\n\n\n        // Loading data\n        let getDatewiseHash = (cases) => {\n            let dhash = {}\n            cases.forEach((el) => {\n                dhash[el['Date']] = dhash[el['Date']] || []\n                dhash[el['Date']].push(el)\n            })\n            return dhash\n        }\n\n        let promises = [\n            d3.json(\"/world.geojson\"),\n            d3.csv(\"/G3_total-confirmed-cases-of-covid-19-per-million-people.csv\"),\n            d3.csv(\"/G4_total-deaths-covid-19.csv\")\n        ]\n\n        Promise.all(promises).then((values) => {\n            let [data, cases, deaths] = values\n            let casesDatewise = getDatewiseHash(cases)\n            let deathsDatewise = getDatewiseHash(deaths)\n            let casesIdentifier = 'Total confirmed cases of COVID-19 per million people (cases per million)'\n            let deathsIdentifier = 'Total confirmed deaths due to COVID-19 (deaths)'\n            getSlider(data, casesDatewise, casesSvg, 's1', casesIdentifier)\n            getSlider(data, deathsDatewise, deathsSvg, 's2', deathsIdentifier)\n        })\n\n        let plotConfirmedCases = (data, datewiseHash, currDate, svg, identifier) => {\n            let casesByID = {}\n            datewiseHash[currDate].forEach((d) => {\n                casesByID[d.Code] = +d[identifier]\n            })\n\n            let tip = identifier.includes('deaths') ? deathsTip : casesTip\n\n            data.features.forEach((d) => { d.cases = casesByID[d.id] })\n\n            svg.append(\"g\")\n                .attr(\"class\", \"countries\")\n                .selectAll(\"path\")\n                .data(data.features)\n                .enter().append(\"path\")\n                .attr(\"d\", path)\n                .style(\"fill\", (d) => { return color(casesByID[d.id]); })\n                .style('stroke', 'white')\n                .style('stroke-width', 1.5)\n                .style(\"opacity\", 0.8)\n                // tooltips\n                .style(\"stroke\", \"white\")\n                .style('stroke-width', 0.3)\n                .on('mouseover', function (d) {\n                    tip.show(d, this)\n\n                    d3.select(this)\n                        .style(\"opacity\", 1)\n                        .style(\"stroke\", \"white\")\n                        .style(\"stroke-width\", 3)\n                })\n                .on('mouseout', function (d) {\n                    tip.hide(d, this)\n\n                    d3.select(this)\n                        .style(\"opacity\", 0.8)\n                        .style(\"stroke\", \"white\")\n                        .style(\"stroke-width\", 0.3)\n                })\n\n            /*\n            svg.append(\"path\")\n                .datum(topojson.mesh(data.features, (a, b) => { return a.id !== b.id; }))\n                .attr(\"class\", \"names\")\n                .attr(\"d\", path)\n           */\n        }\n\n    }\n    render() {\n        return (\n            <Aux>\n                <Row>\n                    <Col md={12} xl={12}>\n                        <Card>\n                            <Card.Body>\n                                <h6 className='mb-4'>\n                                    What is the total number of confirmed cases?\n                                </h6>\n                                <p>\n                                    The number of confirmed cases is lower than the number of total cases. The main reason for this is limited\n                                    testing.\n                                </p>\n                                <div className=\"row align-items-center\">\n                                    <div className=\"col-sm-2\">\n                                        <p id=\"s1-value-fill\"></p>\n                                    </div>\n                                </div>\n\n                                <div className=\"cases-map\">\n                                </div>\n                                <div className=\"col-sm\">\n                                    <div id=\"s1-slider-fill\"></div>\n                                </div>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                    <Col md={12} xl={12}>\n                        <Card>\n                            <Card.Body>\n                                <h6 className='mb-4'>\n                                    Total confirmed deaths\n                                </h6>\n                                <p>\n                                    Limited testing and challenges in the attribution of the cause of death means that the number of confirmed deaths\n                                    may not be an accurate count of the true number of deaths from COVID-19.\n                                </p>\n                                <div className=\"row align-items-center\">\n                                    <div className=\"col-sm-2\">\n                                        <p id=\"s2-value-fill\"></p>\n                                    </div>\n                                </div>\n\n                                <div className=\"deaths-map\">\n                                </div>\n                                <div className=\"col-sm\">\n                                    <div id=\"s2-slider-fill\"></div>\n                                </div>\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                </Row>\n            </Aux>\n        );\n    }\n}\n\nexport default Maps;"],"sourceRoot":""}