{"version":3,"sources":["Dashboard/TotalConfirmedDeaths.js","Dashboard/MultiLineGraph.js","Dashboard/MultiLine.js"],"names":["React","Component","moment","extendMoment","Moment","MultiLineGraph","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","dateArr","value","countryToRegion","colorCode","Asia","Europe","Africa","Oceania","Americas","activeRegions","fetchCSV","bind","assertThisInitialized","populateGraph","setSVG","dateRange","handleChange","valueText","fetchRegions","applyFilter","_this2","d3","then","res","forEach","c","region","setState","sdate","Date","edate","d","setDate","getDate","push","length","graphID","margin","top","right","bottom","left","width","height","svg","concat","append","attr","_this3","csvURL","dataByCountry","key","Entity","entries","includes","filter","item","toConsumableArray","_this4","_this$state","yLimit","selectAll","remove","sDate","eDate","range","countries","x","domain","ticks","style","text","tickSize","tickFormat","y","div","tip","d3Tip","offset","html","cases","values","deaths","fivedeath","enter","val","code","Code","vals","row","_date","contains","on","i","show","raise","transition","duration","hide","ordinal","keys","legendOrdinal","legend","legendColor","shape","type","size","shapePadding","cellFilter","label","scale","console","log","select","event","newValue","v","toLocaleDateString","undefined","year","month","day","options","_this$state2","_this$props","description","title","muiTheme","createMuiTheme","slider","trackSize","handleSize","react_default","a","createElement","Row","className","Col","md","xl","Slider","theme","min","max","onChange","valueLabelDisplay","aria-labelledby","getAriaValueText","valueLabelFormat","MultiLine","_Aux","Card","Body","Dashboard_MultiLineGraph"],"mappings":"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","file":"static/js/11.662710c8.chunk.js","sourcesContent":["import React from 'react';\nimport { Row, Col, Card } from 'react-bootstrap';\n\nimport * as d3 from 'd3'\n\nclass TotalConfirmedDeaths extends React.Component {\n    componentDidMount() {\n        let margin = { top: 10, right: 30, bottom: 30, left: 60 },\n            width = 1000 - margin.left - margin.right,\n            height = 600 - margin.top - margin.bottom;\n       \n        let svg = d3.select(\".graph-body2\")\n\n        let x = d3.scaleTime().range([0, width - (margin.left + margin.right)]);\n        let y = d3.scaleLinear().range([height - (margin.top * 2), 0]);\n\n        let line = d3.line()\n            .x(function (d) { return x(new Date(d.Date)); })\n            .y(function (d) { return y(+d.deaths); });\n\n        let g = svg.append(\"g\")\n            .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n        d3.csv(\"/total-deaths-covid-19.csv\")\n            .then((origdata) => {\n\n                let data = []\n                origdata.forEach(d => {\n                    if (d.Entity == \"World\") {\n                        data.push(d)\n                    }\n                })\n\n                let minDate = new Date(2020, 0, 22)\n                let maxDate = new Date(2020, 4, 15)\n                x.domain([minDate, maxDate]);\n                y.domain([0, 3e5]);\n\n                // add the Y gridlines\n                g.append(\"g\")\n                    .attr(\"class\", \"grid\")\n                    .call(d3.axisLeft(y)\n                        .tickSize(-width)\n                        .tickFormat(\"\")\n                        .ticks(6)\n                    );\n\n                g.append(\"g\")\n                    .attr(\"class\", \"axis axis--x\")\n                    .attr(\"transform\", \"translate(\" + ((margin.left + margin.right) / 2) + \",\" + (height - margin.top) + \")\")\n                    .call(d3.axisBottom(x)\n                        .ticks(6)\n                        .tickFormat(d3.timeFormat(\"%Y-%m-%d\"))\n                    )\n                    .selectAll('.axis--x .tick text')\n                    .append('tspan')\n                    .attr(\"class\", \"axis-tspan\")\n                    .attr(\"x\", 0)\n                    .attr(\"y\", 0)\n                    .attr(\"dy\", margin.top * 2)\n\n                g.append(\"g\")\n                    .attr(\"class\", \"axis axis--y\")\n                    .call(d3.axisLeft(y).ticks(6))\n                    .append(\"text\")\n                    .attr(\"class\", \"axis-title\")\n                    .attr(\"transform\", \"rotate(-90)\")\n                    .attr(\"y\", 6)\n                    .attr(\"dy\", \".71em\")\n\n\n                // Data line and dots group\n                let lineAndDots = g.append(\"g\")\n                    .attr(\"class\", \"line-and-dots\")\n                    .attr(\"transform\", \"translate(\" + ((margin.left + margin.right) / 2) + \",\" + 0 + \")\")\n\n                // Data line\n                lineAndDots.append(\"path\")\n                    .datum(data)\n                    .attr(\"class\", \"data-line\")\n                    .attr(\"d\", line);\n\n                // Data dots\n                lineAndDots.selectAll(\"line-circle\")\n                    .data(data)\n                    .enter().append(\"circle\")\n                    .attr(\"class\", \"data-circle\")\n                    .attr(\"r\", 5)\n                    .attr(\"cx\", function (d) { return x(new Date(d.Date)); })\n                    .attr(\"cy\", function (d) { return y(+d.deaths); });\n\n            })\n\n    }\n    render() {\n        return (\n            <Row>\n                <Col md={12} xl={12}>\n                    <Card>\n                        <Card.Body>\n                            <h6 className='mb4'>Total confirmed COVID-19 deaths</h6>\n                            <div className=\"graph-body2\"></div>\n                        </Card.Body>\n                    </Card>\n                </Col>\n            </Row>\n        )\n    }\n}\nexport default TotalConfirmedDeaths;","import React from 'react'\r\nimport { Row, Col, Card } from 'react-bootstrap'\r\n\r\nimport * as d3 from 'd3'\r\nimport d3Tip from \"d3-tip\"\r\n\r\nimport Aux from \"../hoc/_Aux\"\r\nimport TotalConfirmedDeaths from './TotalConfirmedDeaths'\r\n\r\nimport { Slider, createMuiTheme } from '@material-ui/core'\r\nimport Moment from 'moment'\r\nimport { extendMoment } from 'moment-range';\r\nimport legend from 'd3-svg-legend'\r\nconst moment = extendMoment(Moment);\r\n\r\n\r\nclass MultiLineGraph extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            data: [], dateArr: [], value: [], countryToRegion: {},\r\n            colorCode: {\r\n                \"Asia\": \"#008080\",\r\n                \"Europe\": \"#ffa500\",\r\n                \"Africa\": \"#00ff00\",\r\n                \"Oceania\": \"#0000ff\",\r\n                \"Americas\": \"#ff1493\"\r\n\r\n            },\r\n            activeRegions: [\"Asia\", \"Europe\", \"Africa\", \"Oceania\", \"Americas\"]\r\n        }\r\n\r\n        this.fetchCSV = this.fetchCSV.bind(this)\r\n        this.populateGraph = this.populateGraph.bind(this)\r\n        this.setSVG = this.setSVG.bind(this)\r\n        this.dateRange = this.dateRange.bind(this)\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.valueText = this.valueText.bind(this)\r\n        this.fetchRegions = this.fetchRegions.bind(this)\r\n        this.applyFilter = this.applyFilter.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.fetchCSV()\r\n        this.fetchRegions()\r\n        this.setSVG()\r\n        this.dateRange()\r\n    }\r\n\r\n    fetchRegions() {\r\n        d3.csv(\"/region.csv\")\r\n            .then(res => {\r\n                let countryToRegion = {}\r\n                res.forEach(c => {\r\n                    countryToRegion[c['alpha-3']] = c.region\r\n                })\r\n                this.setState({ countryToRegion: countryToRegion })\r\n            })\r\n    }\r\n\r\n    dateRange() {\r\n        let sdate = new Date(2020, 0, 21)\r\n        let edate = new Date(2020, 4, 16)\r\n        let dateArr = []\r\n        for (let d = sdate; d <= edate; d.setDate(d.getDate() + 1)) {\r\n            dateArr.push(new Date(d))\r\n        }\r\n        this.setState({ dateArr: dateArr, value: [0, dateArr.length - 1] })\r\n    }\r\n\r\n    setSVG() {\r\n        const { graphID } = this.props\r\n        let margin = { top: 10, right: 30, bottom: 30, left: 60 },\r\n            width = 1000 - margin.left - margin.right,\r\n            height = 600 - margin.top - margin.bottom\r\n        let svg = d3.select(`.${graphID}`)\r\n            .append(\"svg\")\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n            .attr(\"transform\",\r\n                \"translate(\" + margin.left + \",\" + margin.top + \")\")\r\n        this.setState({\r\n            svg: svg,\r\n            margin: margin,\r\n            width: width,\r\n            height: height\r\n        })\r\n    }\r\n\r\n    fetchCSV() {\r\n        const { csvURL } = this.props\r\n        d3.csv(csvURL)\r\n            .then(data => {\r\n                let dataByCountry = d3.nest()\r\n                    .key(function (d) { return d.Entity })\r\n                    .entries(data)\r\n                this.setState({ data: dataByCountry })\r\n            })\r\n    }\r\n\r\n    applyFilter(region) {\r\n        const { activeRegions } = this.state\r\n        if (activeRegions.includes(region)) {\r\n            this.setState({activeRegions: activeRegions.filter(item => item !== region)})\r\n        } else {\r\n            this.setState({activeRegions: [...activeRegions, region]})\r\n        }\r\n    }\r\n\r\n    populateGraph() {\r\n        const { data, svg, width, height, margin, value, dateArr, colorCode, countryToRegion, activeRegions } = this.state\r\n        const { yLimit } = this.props\r\n        if (data.length > 0 && svg) {\r\n            svg.selectAll(\"*\").remove()\r\n            let sDate = dateArr[value[0]]\r\n            let eDate = dateArr[value[1]]\r\n            let dateRange = moment().range(sDate, eDate)\r\n            let dataByCountry = data\r\n\r\n            const countries = [\"Afghanistan\", \"Albania\", \"Algeria\", \"Andorra\", \"Angola\", \"Anguilla\",\r\n                \"Antigua and Barbuda\", \"Argentina\", \"Armenia\", \"Aruba\", \"Australia\", \"Austria\", \"Azerbaijan\",\r\n                \"Bahamas\", \"Bahrain\", \"Bangladesh\", \"Barbados\", \"Belarus\", \"Belgium\", \"Belize\", \"Benin\",\r\n                \"Bermuda\", \"Bhutan\", \"Bolivia\", \"Bonaire Sint Eustatius and Saba\", \"Bosnia and Herzegovina\",\r\n                \"Botswana\", \"Brazil\", \"British Virgin Islands\", \"Brunei\", \"Bulgaria\", \"Burkina Faso\",\r\n                \"Burundi\", \"Cambodia\", \"Cameroon\", \"Canada\", \"Cape Verde\", \"Cayman Islands\",\r\n                \"Central African Republic\", \"Chad\", \"Chile\", \"China\", \"Colombia\", \"Congo\", \"Costa Rica\",\r\n                \"Cote d'Ivoire\", \"Croatia\", \"Cuba\", \"Curacao\", \"Cyprus\", \"Czech Republic\",\r\n                \"Democratic Republic of Congo\", \"Denmark\", \"Djibouti\", \"Dominica\", \"Dominican Republic\",\r\n                \"Ecuador\", \"Egypt\", \"El Salvador\", \"Equatorial Guinea\", \"Eritrea\", \"Estonia\", \"Ethiopia\",\r\n                \"Faeroe Islands\", \"Falkland Islands\", \"Fiji\", \"Finland\", \"France\", \"French Polynesia\",\r\n                \"Gabon\", \"Gambia\", \"Georgia\", \"Germany\", \"Ghana\", \"Gibraltar\", \"Greece\", \"Greenland\",\r\n                \"Grenada\", \"Guam\", \"Guatemala\", \"Guernsey\", \"Guinea\", \"Guinea-Bissau\", \"Guyana\", \"Haiti\",\r\n                \"Honduras\", \"Hungary\", \"Iceland\", \"India\", \"Indonesia\", \"Iran\", \"Iraq\", \"Ireland\",\r\n                \"Isle of Man\", \"Israel\", \"Italy\", \"Jamaica\", \"Japan\", \"Jersey\", \"Jordan\", \"Kazakhstan\",\r\n                \"Kenya\", \"Kosovo\", \"Kuwait\", \"Kyrgyzstan\", \"Laos\", \"Latvia\", \"Lebanon\", \"Liberia\",\r\n                \"Libya\", \"Liechtenstein\", \"Lithuania\", \"Luxembourg\",\r\n                \"Macedonia\", \"Madagascar\", \"Malawi\", \"Malaysia\", \"Maldives\", \"Mali\", \"Malta\",\r\n                \"Mauritania\", \"Mauritius\", \"Mexico\", \"Moldova\", \"Monaco\", \"Mongolia\", \"Montenegro\",\r\n                \"Montserrat\", \"Morocco\", \"Mozambique\", \"Myanmar\", \"Namibia\", \"Nepal\", \"Netherlands\",\r\n                \"New Caledonia\", \"New Zealand\", \"Nicaragua\", \"Niger\", \"Nigeria\",\r\n                \"Northern Mariana Islands\", \"Norway\", \"Oman\", \"Pakistan\", \"Palestine\",\r\n                \"Panama\", \"Papua New Guinea\", \"Paraguay\", \"Peru\", \"Philippines\", \"Poland\", \"Portugal\",\r\n                \"Puerto Rico\", \"Qatar\", \"Romania\", \"Russia\", \"Rwanda\", \"Saint Kitts and Nevis\",\r\n                \"Saint Lucia\", \"Saint Vincent and the Grenadines\", \"San Marino\", \"Sao Tome and Principe\",\r\n                \"Saudi Arabia\", \"Senegal\", \"Serbia\", \"Seychelles\", \"Sierra Leone\", \"Singapore\",\r\n                \"Sint Maarten (Dutch part)\", \"Slovakia\", \"Slovenia\", \"Somalia\", \"South Africa\",\r\n                \"South Korea\", \"South Sudan\", \"Spain\", \"Sri Lanka\", \"Sudan\",\r\n                \"Suriname\", \"Swaziland\", \"Sweden\", \"Switzerland\", \"Syria\", \"Taiwan\", \"Tanzania\",\r\n                \"Thailand\", \"Timor\", \"Togo\", \"Trinidad and Tobago\", \"Tunisia\", \"Turkey\",\r\n                \"Turks and Caicos Islands\", \"Uganda\", \"Ukraine\", \"United Arab Emirates\", \"United Kingdom\",\r\n                \"United States\", \"United States Virgin Islands\", \"Uruguay\",\r\n                \"Uzbekistan\", \"Vatican\", \"Venezuela\", \"Vietnam\",\r\n                \"Yemen\", \"Zambia\", \"Zimbabwe\"]\r\n\r\n\r\n            let x = d3.scaleLinear()\r\n                .domain([0, 120])\r\n                .range([0, width])\r\n\r\n            svg.append(\"g\")\r\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n                .call(d3.axisBottom(x).ticks(5))\r\n            svg.append(\"text\")\r\n                .attr(\"transform\",\r\n                    \"translate(\" + (width / 2) + \" ,\" +\r\n                    (height + margin.top + 20) + \")\")\r\n                .style(\"text-anchor\", \"middle\")\r\n                .text(\"Days since 5 daily deaths first reported\")\r\n            let make_x_gridlines = () => {\r\n                return d3.axisBottom(x)\r\n                    .ticks(5)\r\n            }\r\n            svg.append(\"g\")\r\n                .attr(\"class\", \"grid\")\r\n                .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n                .call(make_x_gridlines()\r\n                    .tickSize(-height)\r\n                    .tickFormat(\"\")\r\n                )\r\n            let y = d3.scaleSymlog()\r\n                .domain([0, yLimit])\r\n                .range([height, 0])\r\n            svg.append(\"g\")\r\n                .call(d3.axisLeft(y).ticks(5, \"~s\"))\r\n\r\n            svg.append(\"text\")\r\n                .attr(\"transform\", \"rotate(-90)\")\r\n                .attr(\"y\", 0 - margin.left)\r\n                .attr(\"x\", 0 - (height / 2))\r\n                .attr(\"dy\", \"1em\")\r\n                .style(\"text-anchor\", \"middle\")\r\n                .text(\"LOG\")\r\n\r\n            svg.append(\"g\")\r\n                .attr(\"class\", \"grid\")\r\n                .call(make_y_gridlines()\r\n                    .tickSize(-width)\r\n                    .tickFormat(\"\")\r\n                )\r\n            function make_y_gridlines() {\r\n                return d3.axisLeft(y)\r\n                    .ticks(5)\r\n            }\r\n            let color = d3.scaleOrdinal(d3.schemeCategory10)\r\n                .domain(countries)\r\n\r\n            let div = d3.select(\".graph-body\").append(\"div\")\r\n                .attr(\"class\", \"tooltip-line\")\r\n                .style(\"opacity\", 0)\r\n\r\n            // Set SVGs and tooltips\r\n            let tip = d3Tip()\r\n                .attr('class', 'd3-tip')\r\n                .offset([-10, 0])\r\n                .html(function (d) {\r\n                    let cases = d.values[d.values.length - 1]\r\n                    return `<strong>Country: </strong>\r\n                            <span class='details'>\r\n                                ${d.key}<br>\r\n                            </span>\r\n                            <strong>${cases.deaths} </strong>\r\n                            <span class='details'> \r\n                            deaths in ${cases.fivedeath} days\r\n                            </span>`\r\n                })\r\n            svg.selectAll(\".line\")\r\n                .data(dataByCountry)\r\n                .enter()\r\n                .append(\"path\")\r\n                .attr(\"fill\", \"none\")\r\n                .attr(\"stroke\", function (d) {\r\n                    let val = d.values[0]\r\n                    let code = val ? val.Code : d.key\r\n                    return colorCode[countryToRegion[code]] || \"#000\"\r\n                })\r\n                .attr(\"stroke-width\", 1.5)\r\n                .attr(\"d\", function (d) {\r\n                    let val = d.values[0]\r\n                    let code = val ? val.Code : d.key\r\n                    if (countries.includes(d.key) && activeRegions.includes(countryToRegion[code])) {\r\n                        let vals = d.values.filter(row => {\r\n                            let _date = moment(row.Date, \"MMM D, YYYY\")\r\n                            return dateRange.contains(_date)\r\n                        })\r\n                        return d3.line()\r\n                            .x(function (d) { return x(d.fivedeath); })\r\n                            .y(function (d) { return y(d.deaths); })\r\n                            (vals)\r\n                    }\r\n                })\r\n                .on('mouseover', function (d, i) {\r\n                    tip.show(d, this)\r\n                    const selection = d3.select(this).raise()\r\n                    selection\r\n                        .transition()\r\n                        .duration(\"10\")\r\n                        .attr(\"stroke\", function (d) {\r\n                            let val = d.values[0]\r\n                            let code = val ? val.Code : d.key\r\n                            return colorCode[countryToRegion[code]] || \"#000\"\r\n                        })\r\n                        .attr(\"opacity\", \"0.85\")\r\n                        .attr(\"stroke-width\", 3.5)\r\n                    div.transition()\r\n                        .duration(50)\r\n                        .style(\"opacity\", 1)\r\n                })\r\n                .on('mouseout', function (d, i) {\r\n                    tip.hide(d, this)\r\n                    const selection = d3.select(this)\r\n                    selection\r\n                        .transition()\r\n                        .duration(\"10\")\r\n                        .attr(\"stroke\", function (d) {\r\n                            let val = d.values[0]\r\n                            let code = val ? val.Code : d.key\r\n                            return colorCode[countryToRegion[code]] || \"#000\"\r\n                        })\r\n                        .attr(\"opacity\", \"1\")\r\n                        .attr(\"stroke-width\", 1.5)\r\n                    div.transition()\r\n                        .duration('50')\r\n                        .style(\"opacity\", 0)\r\n\r\n                })\r\n\r\n            svg.call(tip)\r\n\r\n            let ordinal = d3.scaleOrdinal()\r\n                .domain(Object.keys(colorCode))\r\n                .range(Object.values(colorCode))\r\n            svg.append(\"g\")\r\n                .attr(\"class\", \"legendOrdinal\")\r\n                .attr(\"transform\", \"translate(800,20)\");\r\n\r\n            let legendOrdinal = legend.legendColor()\r\n                //d3 symbol creates a path-string, for example\r\n                //\"M0,-8.059274488676564L9.306048591020996,\r\n                //8.059274488676564 -9.306048591020996,8.059274488676564Z\"\r\n                .shape(\"path\", d3.symbol().type(d3.symbolSquare).size(150)())\r\n                .shapePadding(10)\r\n                //use cellFilter to hide the \"e\" cell\r\n                .cellFilter(function (d) { return d.label !== \"e\" })\r\n                .scale(ordinal)\r\n                .on(\"cellclick\", (region) => {\r\n                    console.log(region)\r\n                    this.applyFilter(region)\r\n                });\r\n\r\n            svg.select(\".legendOrdinal\")\r\n                .call(legendOrdinal);\r\n\r\n        }\r\n    }\r\n    handleChange(event, newValue) {\r\n        this.setState({ value: newValue })\r\n    }\r\n    valueText(v) {\r\n        const { dateArr } = this.state\r\n        const options = { year: 'numeric', month: 'short', day: 'numeric' }\r\n        let date = dateArr[v]\r\n        if (date) {\r\n            return dateArr[v].toLocaleDateString(undefined, options)\r\n        } else {\r\n            return v\r\n        }\r\n    }\r\n    render() {\r\n        const options = { month: 'short', day: 'numeric' }\r\n        const { dateArr, value } = this.state\r\n        const { description, title, graphID } = this.props\r\n        this.populateGraph()\r\n        const muiTheme = createMuiTheme({\r\n            slider: {\r\n                trackSize: 100,\r\n                handleSize: 100\r\n            }\r\n        })\r\n        return (\r\n            <Row>\r\n                <h6 className='mb-4'>{title}</h6>\r\n                <p>\r\n                    {description}\r\n                </p>\r\n                <div className=\"row d-flex align-items-center\">\r\n                    <div className={`col-12 ${graphID}`}>\r\n                    </div>\r\n                </div>\r\n                <Col md={12} xl={12}>\r\n                    <Col md={12} xl={12}>\r\n                        <Slider\r\n                            theme={muiTheme}\r\n                            min={0}\r\n                            max={dateArr.length - 1}\r\n                            value={value}\r\n                            onChange={this.handleChange}\r\n                            valueLabelDisplay=\"auto\"\r\n                            aria-labelledby=\"range-slider\"\r\n                            getAriaValueText={this.valueText}\r\n                            valueLabelFormat={(x) => {\r\n                                return dateArr[x] ? dateArr[x].toLocaleDateString(undefined, options) : x\r\n                            }}\r\n                        />\r\n                    </Col>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MultiLineGraph","import React from 'react'\r\nimport { Row, Col, Card } from 'react-bootstrap'\r\n\r\nimport Aux from \"../hoc/_Aux\"\r\nimport MultiLineGraph from './MultiLineGraph'\r\n\r\nclass MultiLine extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n    render() {\r\n        let title = \"Total confirmed COVID-19 deaths: how rapidly are they increasing?\"\r\n        let description = \"Limited testing and challenges in the attribution of the cause of death means that the number of confirmed deaths may not be an accurate count of the true number of deaths from COVID-19.\"\r\n        return (\r\n            <Aux>\r\n                <div className=\"graph-body\">\r\n                </div>\r\n                <Row>\r\n                    <Col md={12} xl={12}>\r\n                        <Card>\r\n                            <Card.Body>\r\n                                <MultiLineGraph\r\n                                    title={title}\r\n                                    description={description}\r\n                                    csvURL=\"/covid-confirmed-deaths-since-5th-death.csv\"\r\n                                    graphID=\"covid-confirmed-deaths-since-5th-death\"\r\n                                    yLimit={1e5}\r\n                                />\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                    <Col md={12} xl={12}>\r\n                        <Card>\r\n                            <Card.Body>\r\n                                <MultiLineGraph\r\n                                    title=\"Daily confirmed deaths: are we bending the curve?\"\r\n                                    description={\"Shown is the 7-day rolling average. Limited testing and challenges in the attribution of the cause of death means that the number of confirmed deaths may not be an accurate count of the true number of deaths from COVID-19.\"}\r\n                                    csvURL=\"/covid-confirmed-daily-deaths-epidemiological-trajectory.csv\"\r\n                                    graphID=\"covid-confirmed-daily-deaths-epidemiological-trajectory\"\r\n                                    yLimit={3e3}\r\n                                />\r\n                            </Card.Body>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Aux>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MultiLine\r\n"],"sourceRoot":""}